openapi: 3.0.3
info:
  title: Fun Forecast
  description: |-
    This is the API Definition of Fun Forecast's backend. 
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:1323/api/v1
tags:
  - name: forecast
    description: Returns forecast data relevant to a specific activity or activities
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: gear
    description: Operations to get affiliate links for relevant gear
  - name: user
    description: Operations about user
paths:
  /activity/{verb}/loc/{loc_ref}:
    get:
      tags:
        - activity
      summary: Get an activity
      operationId: getActivityByVerbAndLoc
      parameters:
        - name: verb
          in: path
          description: verb with a forecast template
          required: true
          schema:
            type: string
            enum:
              - hike
              - bicycle
              - motorcycle
              - run
        - name: loc_ref
          in: path
          description: location reference. Zip code unless otherwise noted
          required: true
          schema:
            type: string
          
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  /gear:
    post:
      tags:
        - gear
      summary: Get gear post and affiliate link
      description: Get an affiliate post for a given set of conditions
      operationId: getAffiliateLink
      requestBody:
        description: Conditions from the given Forecast Hour
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GearRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AffiliatePost'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - gear
      summary: Create new affiliate link item
      description: Create affiliate link for given conditions
      operationId: createAffiliateLink
      requestBody:
        description: Conditions from the given Forecast Hour
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAffiliatePost'
        required: true
      responses:
        '204':
          description: Successful operation
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    ForecastHour:
      type: object
      properties:
        start:
          type: string
          example: "2023-02-14T09:00:00-05:00"
        end:
          type: string
          example: "2023-02-14T09:00:00-05:00"
        score:
          type: integer
          format: int32
          example: 0
          description: "0 means it's a perfect day to do the activity. As the score goes up the weather is less ideal."
        conditions:
          type: array
          items:
            type: string
            enum:
              - hot
              - cold
              - wind
              - rain
              - dark
              - damp
              - inclement
          description: For each activityScore, there will be a corresponding condition. Some conditions add more marks than others, so the length of the array and the activity score may not match.
          example: ["cold", "wind"]
        temperature:
          type: integer
          format: int32
          example: 72
        unit:
          type: string
          example: imperial
          enum:
            - metric
            - imperial
    Location:
      type: object
      properties:
        lat:
          type: number
          format: float
          example: 36.86367
        lng:
          type: number
          format: float
          example: -78.53236
        city:
          type: string
          example: "San Marcos"
        state:
          type: string
          example: "TX"
        timezone:
          type: string
    ForecastDay:
      type: object
      properties:
        hours:
          type: array
          items:
            $ref: '#/components/schemas/ForecastHour'
        location:
          $ref: '#/components/schemas/Location'
        sunrise:
          type: string
          example: "2023-02-14T07:12:45-05:00"
        sunset:
          type: string
          example: "2023-02-14T17:12:05-05:00"
    AffiliatePost:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        url:
          type: string
          example: https://rei.com/my/affiliate/link
        imagePath:
          type: string
          example: "assets/raincoat.png"
        title:
          type: string
          example: A performance raincoat that keeps you dry
    NewAffiliatePost:
      description: Data required to create a new affiliate link
      type: object
      properties:
        url:
          type: string
          example: https://rei.com/my/affiliate/link
        image:
          type: string
          format: byte
        title:
          type: string
          example: A performance raincoat that keeps you dry
        conditions:
          type: array
          items:
            type: string
            enum:
              - hot
              - cold
              - wind
              - rain
              - dark
              - damp
              - inclement
              - cloudy
              - sunny
              - foggy
              - rainy
    GearRequest:
      type: object
      properties:
        hour:
          $ref: '#/components/schemas/ForecastHour'
        conditions:
          type: array
          items:
            type: string
            enum:
              - hot
              - cold
              - wind
              - rain
              - dark
              - damp
              - inclement
          example: ["hot"]
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    AffiliateRequest:
      description: Given the forecast hour and conditions, will return an affiliate link
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GearRequest'
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header